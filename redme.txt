app - расположено приложение
    models - работают с БД
    views - представления для пользователей
        layouts шаблоны
        под каждый контроллер создается своя папка
    controllers
public(web) - все запросы от пользователя перенаправляются в эту папку
    js
    style
    img
    .htaccess (
    -создаем правило для состояний
    RewriteCond {%REQUEST_FILENAME} !-f - если это не файл
    RewriteCond {%REQUEST_FILENAME} !-d - если это не директория

    RewriteRule (.*) index.php?$1 [L,QSA](без пробелов!)- берем все что у нас в строке запроса  и добавим GET параметром
    QSA - позволяет не переписывать строку, а добавлять
    )
vendor -
    core - ядро
        base - папка с базовыми классами (абстракция)
            Router -класс отвечающий за маршрутизацию
            View клас отвечающий за виды
            Model - базовый класс для создания модели
        Db -

    libs - бибилиотеки для работы фреймворка

config настройки
    config_db.php - настройки соединения с БД



.htaccess
(RewriteEngine On
 RewriteRule ^(.*)$ /public/$1) создали правило для переадресации запросов из корневой папки в папку public
****************************
маршрутизатор
Для ограничения доступа к некоторым методам, можно добавить приставку Action в конце
и в классе Route::dispath приклеить строку Action - таким образом, если будет попытка нежелательного метода
маршрутизатор его все равно не найдет
******
автозагрузка
для удобной автозагрузки автозагрузки необходимо обьявлять namespace
****
свои правила длямаршрутизации можно указать выше чем правила по умолчанию
например если мы хотим вызвать метод(action) из контроллера которого нет,
но мы хотим вызвать какой-нибудь по умолчанию
*****
виды - динамическая часть
шаблон - повторяющаяся час каждой страницы (header, footer etc..)
*****

*****
если мы используем, например пагинацию, то перемещение осуществляется
отпракой GET параметрами, и чтобы маршрутизация работала адекватно, нам
необходимо отсекать лишнюю часть запроса. Отсекается все явные забросы
(id=1, p2, s2 etc..) метод removeQueryString
*****
для реализации видов создаем класс core\base\View в
для того, чтобы шаблоны гарантированно появлялись раньше видов
воспользуемся буферизацией вида (ob_start())
шаблоны находятся в папке layouts
****
передача переменных внутрь вида
для этого пишется специальный метод (set) в контроллере
***
для работы с БД создается подключение (Config\connect_db)
в ядре Core\Db.php
      Core\base\Model.php

в моделях создаются свойства(какие поля таблиц будут задействованы)
->в контроллере создается объект модели и вызывается ее метод
(описан либо в самой модели, либо в абстрактной)
->данные передаются в вид и выводятся в нужном нам формате

для реализации работы с БД чаще всего используются ORM(Object Relation Mapping)
****
кеширование
ШАблон проектирования Реестр - идея состоит в том,чтобы создать контейнеры для
хранения объектов, часто используемых во всем приложении

